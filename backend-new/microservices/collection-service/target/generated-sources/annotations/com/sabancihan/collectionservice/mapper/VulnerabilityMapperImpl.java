package com.sabancihan.collectionservice.mapper;

import com.sabancihan.collectionservice.dto.SoftwareVulnerabilityDTO;
import com.sabancihan.collectionservice.dto.VulnerabilityResponse;
import com.sabancihan.collectionservice.model.Vulnerability;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2022-09-04T13:47:22+0300",
    comments = "version: 1.5.2.Final, compiler: javac, environment: Java 18.0.2.1 (Oracle Corporation)"
)
@Component
public class VulnerabilityMapperImpl implements VulnerabilityMapper {

    @Override
    public VulnerabilityResponse vulnerabilityToVulnerabilityResponse(Vulnerability vulnerability) {
        if ( vulnerability == null ) {
            return null;
        }

        VulnerabilityResponse.VulnerabilityResponseBuilder vulnerabilityResponse = VulnerabilityResponse.builder();

        vulnerabilityResponse.id( vulnerability.getId() );
        vulnerabilityResponse.vendorName( vulnerability.getVendorName() );
        vulnerabilityResponse.softwareName( vulnerability.getSoftwareName() );
        Set<String> set = vulnerability.getAffectedVersions();
        if ( set != null ) {
            vulnerabilityResponse.affectedVersions( new LinkedHashSet<String>( set ) );
        }

        return vulnerabilityResponse.build();
    }

    @Override
    public SoftwareVulnerabilityDTO vulnerabilityToSoftwareVulnerabilityDTO(Vulnerability vulnerability) {
        if ( vulnerability == null ) {
            return null;
        }

        SoftwareVulnerabilityDTO.SoftwareVulnerabilityDTOBuilder softwareVulnerabilityDTO = SoftwareVulnerabilityDTO.builder();

        softwareVulnerabilityDTO.id( vulnerability.getId() );

        return softwareVulnerabilityDTO.build();
    }

    @Override
    public List<VulnerabilityResponse> vulnerabilitiesToVulnerabilityResponses(List<Vulnerability> vulnerabilities) {
        if ( vulnerabilities == null ) {
            return null;
        }

        List<VulnerabilityResponse> list = new ArrayList<VulnerabilityResponse>( vulnerabilities.size() );
        for ( Vulnerability vulnerability : vulnerabilities ) {
            list.add( vulnerabilityToVulnerabilityResponse( vulnerability ) );
        }

        return list;
    }
}
