package com.sabancihan.collectionservice.service;

import com.sabancihan.collectionservice.dto.VulnerabilityResponse;
import com.sabancihan.collectionservice.mapper.VulnerabilityMapper;
import com.sabancihan.collectionservice.model.Vulnerability;
import com.sabancihan.collectionservice.repository.VulnerabilityRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.cassandra.core.query.CassandraPageRequest;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.SliceImpl;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@RequiredArgsConstructor
@Service
@Transactional
@Slf4j

public class VulnerabilityService {

    private final VulnerabilityMapper vulnerabilityMapper;

    private final VulnerabilityRepository vulnerabilityRepository;

    public List<VulnerabilityResponse> getVulnerabilityBySoftware(String software_name) {
        return vulnerabilityMapper.vulnerabilitiesToVulnerabilityResponses(vulnerabilityRepository.findBySoftwareName(software_name));


    }

    public Slice<VulnerabilityResponse> getAllVulnerabilities(Integer page, Integer size) {

        Slice<Vulnerability> vulnerabilities = vulnerabilityRepository.findAll(CassandraPageRequest.of(page, size));

        List<VulnerabilityResponse>  vulnerabilityResponses = vulnerabilityMapper.vulnerabilitiesToVulnerabilityResponses(vulnerabilities.getContent());

        return new SliceImpl<>(vulnerabilityResponses,vulnerabilities.getPageable(), vulnerabilities.hasNext());
    }
}
